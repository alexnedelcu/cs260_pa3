========================================================
Problem 1:
========================================================




Data Collected:
_____________TEST CONDITIONS____________
N: 50000
B: 5
_________________RESULTS________________
Average Insert of New Item :            10000.3
Average Insert of Existing Item:        5043.36
Average Successful Delete :             5023.13
Average Unsuccessful Delete :           9999.47

_____________TEST CONDITIONS____________
N: 10000
B: 5
_________________RESULTS________________
Average Insert of New Item :            2000.93
Average Insert of Existing Item:        999.475
Average Successful Delete :             1004.75
Average Unsuccessful Delete :           1999.87

_____________TEST CONDITIONS____________
N: 5000
B: 5
_________________RESULTS________________
Average Insert of New Item :            1000.51
Average Insert of Existing Item:        503.11
Average Successful Delete :             501.208
Average Unsuccessful Delete :           999.157

Conclusions:
From the experiments preformed, it is apparent that INSERT requires a number
of probes equal to N/B on average. This is because the MEMBER function has to
look at all the items in a given bucket. On average, the number of items per
bucket is N/B. So, it follows that N/B probes are required for each
successful INSERT.

When insert is called with an item that is already present, the MEMBER
function will only scan the bucket until the item is reached. Since there
are N/B items per bucket on average, the MEMBER function only needs to probe
N/2B items until it finds the item. Once the item is found, the insert
operation is done.

It is also clear that deletions require a number of probes equal to N/2B on
average. This is because the DELETE operation only scans the bucket until it
finds the item to be deleted. Thus, the time spent on a DELETE operation is
proportional to the position of the item in the list. Since there are approximately
N/B items in each bucket, the "average" position will be N/2B. So, it should take 
N/2B probes on average to find the item to be deleted.

In contrast, when deletion is called on an item the is NOT in the
dictionary, the DELETE operation requies all items in the bucket to be
probed, just like with INSERT. Since there are N/B items in each bucket on 
average, it follows that calling DELETE on a non-existant item would require N/B
probes on average.

Problem 2:

Dictionary Insert-
	Tested at 5000, expected nodes touched = (1+1/(1-a)^2)/2 (a=4999/5000)
=2500.5, calculated value = 5000. This error could come from running through
the hashtable an extra time when making sure the item is not in there.

Dictionary Deletion-
	Tested at 5000- expected value = 5000, calculated value = 5000

================================================================
PROBLEM 3:
================================================================


In order to calculate the average path from the root node to any other node, I created a function that searches all possible paths and counts their length.

The average was calculated by summing all the path lengths and dividing to the number of paths (which is the same as the total number of nodes in the tree)

The program output is in the file "average_path.txt". It reates trees with the sizes between 100 and 250 nodes. Every iteration creates a new trees which adds random values until they reach the specified size. Finally, the experimental value is calculated which represents the average length of the paths from the root to any node.

Compared to log2(n), we could observe that they grow at the same pace. Differences between the experimental value and the log2(n) are given by having the trees built unbalanced. Since log2(n) is supposed to be the worst case scenario, it is usually a little bit greater thatn the experimental value.

NOte: The program works for the common words in the input file. I consider words, the strings that contain only letters. Therefore, words like "don't", "doesn't", "o'clock" or the ones separated by dash would be splitted in 2 parts.

NOte: The program works for the common words in the input file. I consider words, the strings that contain only letters. Therefore, words like "don't", "doesn't", "o'clock" or the ones separated by dash would be splitted in 2 parts.

NOte: The program works for the common words in the input file. I consider words, the strings that contain only letters. Therefore, words like "don't", "doesn't", "o'clock" or the ones separated by dash would be splitted in 2 parts.


Nodes  Experimantal value    log2(n)
 100         7.74              6.64
 101         6.69              6.66
 102         6.22              6.67
 103         6.71              6.69
 104         6.61              6.70
 105         6.59              6.71
 106         8.00              6.73
 107         5.60              6.74
 108         6.99              6.75
 109         6.28              6.77
 110         6.52              6.78
 111         7.68              6.79
 112         6.26              6.81
 113         6.22              6.82
 114         5.99              6.83
 115         6.67              6.85
 116         5.79              6.86
 117         5.69              6.87
 118         5.76              6.88
 119         6.03              6.89
 120         6.67              6.91
 121         8.01              6.92
 122         6.34              6.93
 123         6.49              6.94
 124         6.46              6.95
 125         6.54              6.97
 126         6.56              6.98
 127         7.54              6.99
 128         7.12              7.00
 129         6.95              7.01
 130         7.08              7.02
 131         6.38              7.03
 132         9.42              7.04
 133         6.79              7.06
 134         6.55              7.07
 135         6.51              7.08
 136         7.11              7.09
 137         6.22              7.10
 138         7.11              7.11
 139         6.65              7.12
 140         7.18              7.13
 141         7.30              7.14
 142         8.10              7.15
 143         7.15              7.16
 144         6.57              7.17
 145         7.15              7.18
 146         7.12              7.19
 147         7.40              7.20
 148         6.57              7.21
 149         8.30              7.22
 150         8.15              7.23
 151         8.30              7.24
 152         7.61              7.25
 153         7.48              7.26
 154         6.29              7.27
 155         7.63              7.28
 156         7.44              7.29
 157         6.94              7.29
 158         7.51              7.30
 159         6.69              7.31
 160         8.50              7.32
 161         7.43              7.33
 162         6.86              7.34
 163         7.81              7.35
 164         7.04              7.36
 165         7.75              7.37
 166         7.21              7.38
 167         7.10              7.38
 168         7.24              7.39
 169         7.01              7.40
 170         7.23              7.41
 171         8.15              7.42
 172         8.19              7.43
 173         6.51              7.43
 174         6.98              7.44
 175         6.95              7.45
 176         7.61              7.46
 177         7.10              7.47
 178         6.79              7.48
 179         7.44              7.48
 180         7.34              7.49
 181         7.35              7.50
 182         7.20              7.51
 183         8.22              7.52
 184         7.85              7.52
 185         7.23              7.53
 186         6.65              7.54
 187         7.36              7.55
 188         9.21              7.55
 189         6.76              7.56
 190         7.19              7.57
 191         6.98              7.58
 192         7.91              7.58
 193         7.56              7.59
 194         7.94              7.60
 195         10.44              7.61
 196         7.84              7.61
 197         7.63              7.62
 198         7.77              7.63
 199         7.61              7.64
 200         6.95              7.64
 201         7.77              7.65
 202         7.18              7.66
 203         8.01              7.67
 204         8.10              7.67
 205         7.91              7.68
 206         7.79              7.69
 207         8.02              7.69
 208         7.72              7.70
 209         7.72              7.71
 210         7.04              7.71
 211         7.57              7.72
 212         7.70              7.73
 213         8.29              7.73
 214         7.50              7.74
 215         7.41              7.75
 216         7.57              7.75
 217         8.36              7.76
 218         8.10              7.77
 219         7.58              7.77
 220         7.72              7.78
 221         7.98              7.79
 222         8.32              7.79
 223         8.42              7.80
 224         7.88              7.81
 225         9.76              7.81
 226         7.61              7.82
 227         8.72              7.83
 228         7.85              7.83
 229         7.72              7.84
 230         8.08              7.85
 231         8.32              7.85
 232         8.31              7.86
 233         8.73              7.86
 234         7.60              7.87
 235         7.63              7.88
 236         8.26              7.88
 237         8.18              7.89
 238         7.87              7.89
 239         7.77              7.90
 240         9.63              7.91
 241         7.67              7.91
 242         8.57              7.92
 243         8.95              7.92
 244         8.23              7.93
 245         8.63              7.94
 246         8.49              7.94
 247         8.09              7.95
 248         8.12              7.95
 249         10.72              7.96
